import random
from multiprocessing import Pool
import time


def umnozhenie(A, B, linea, stolbets2, lineb):#умножение матриц
    if stolbets2 == linea:
        C = []
        F = []
        for i in range(linea):
            for q in range(stolbets2):
                S = 0
                for k in range(lineb):
                    S = S + A[l][k] * B[k][q]
                F.append(S)
            C.append(F)
            F = []
        return C

line_a = int(10000)# кол-во строк в первой матрице
stolb_a = int(10000)# кол-во столбцов в первой матрице
line_b = int(10000)#кол-во строк во второй матрице
stolb_b = int(10000)# кол-во столбцов во второй матрице
A = [[random.randint(0, 100) for i in range(stolb_a)] for i in range(line_a)]#генерац матриц
B = [[random.randint(0, 100) for q in range(stolb_b)] for q in range(line_b)]#генерац матриц

f = open("file.txt", "a+")#открытие файла
start = time.time()
if __name__ == '__main__':
    multproc = Pool(processes=7)#разбиваем для 7 параллельных проц
    process1 = multproc.apply_async(umnozhenie(A, B, line_a // 5, stolb_b // 5, line_b // 5))
    process2 = multproc.apply_async(umnozhenie(A, B, line_a // 5, stolb_b // 5, line_b // 5))
    process3 = multproc.apply_async(umnozhenie(A, B, line_a // 5, stolb_b // 5, line_b // 5))
    process4 = multproc.apply_async(umnozhenie(A, B, line_a // 5, stolb_b // 5, line_b // 5))
    process5 = multproc.apply_async(umnozhenie(A, B, line_a // 5, stolb_b // 5, line_b // 5))
    process6 = multproc.apply_async(umnozhenie(A, B, line_a // 5, stolb_b // 5, line_b // 5))
    process7 = multproc.apply_async(umnozhenie(A, B, line_a // 5, stolb_b // 5, line_b // 5))
    multproc.close()
    multproc.join()
    end = time.time() - start
    f.write(str('{:.4f}'.format(end)) + ';' + '\n')#запись в файл
